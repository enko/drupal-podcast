<?php
/**
 * @file
 * Code for the Podcast feature.
 */

include_once 'podcast.features.inc';

include_once 'podcast.migrate.inc';

function podcast_migrate_api() {
  $api = array(
    'api' => 2,
    'migrations' => array(
      'Podcast' => array('class_name' => 'PodcastMigration'),
    ),
  );
  return $api;
}

function podcast_node_update($node) {
  if ($node->type == 'episode') {
    if (_podcast_sanitize_file_name($node) > 0) {
      drupal_set_message(t('Could not rename the podcast-file.'),'error');
    }
    if (_podcast_write_id3($node) > 0) {
      drupal_set_message(t('Could not write id3-tags into the podcast-file.'),'error');
    }
  }
}

function podcast_node_insert($node) {
  if ($node->type == 'episode') {
    if (_podcast_sanitize_file_name($node) > 0) {
      drupal_set_message(t('Could not rename the podcast-file.'),'error');
    }
    if (_podcast_write_id3($node) > 0) {
      drupal_set_message(t('Could not write id3-tags into the podcast-file.'),'error');
    }
  }
}

function _podcast_sanitize_file_name($node) {
  if ($node->nid > 0) {
    $show = node_load($node->field__episode__show['und'][0]['target_id']);
    $fileformat = $show->field__show__file_format['und'][0]['safe_value'];
    $filename = token_replace($fileformat, array('node' => $node));
    $file = file_load($node->field_episode_audio['und'][0]['fid']);
    if ($file->filename != $filename) {
      if (file_move($file, sprintf('public://%s', $filename)) === FALSE) {
        return 1;
      }
      else {
        return 0;
      }
    }
    else {
      return 0;
    }
  }
  return 1;
}

function _podcast_write_id3($node) {
  if ($node->nid > 0) {
    $show = node_load($node->field__episode__show['und'][0]['target_id']);
    $tagdata = array();

    // first collect all the data to put in the id3 tag
    $tagdata['artist'] = array($show->title);
    $tagdata['title'] = array(sprintf('%s (#%s)', $node->title, $node->field__episode__number['und'][0]['value']));
    $tagdata['genre'] = array('Podcast');
    $tagdata['track'] = array($node->field__episode__number['und'][0]['value']);
    $tagdata['year'] = array(date('Y', $node->created));
    $image = file_load($node->field__episode__image['und'][0]['fid']);
    $uri = $image->uri;
    $fhandle = fopen($uri, 'r');
    $image_data = fread($fhandle, filesize($uri));
    fclose($fhandle);
    $tagdata['attached_picture'][0]['data'] = $image_data;
    $tagdata['attached_picture'][0]['picturetypeid'] = 0x03;
    $tagdata['attached_picture'][0]['description'] = '';
    $tagdata['attached_picture'][0]['mime'] = $image->filemime;

    // now safe it into teh id3 tag
    require_once('getid3/getid3.php');
    require_once('getid3/write.php');
    $tagwriter = new getid3_writetags;
    $audiofile = file_load($node->field_episode_audio['und'][0]['fid']);
    $tagwriter->filename = drupal_realpath($audiofile->uri);
    $tagwriter->tagformats = array('id3v2.3');
    $tagwriter->tag_encoding = 'UTF-8';
    $tagwriter->remove_other_tags = TRUE;
    $tagwriter->tag_data = $tagdata;
    if ($tagwriter->WriteTags()) {
      return 0;
    }
    else {
      return 1;
    }

  }
  return 1;
}

function podcast_theme($existing, $type, $theme, $path) {
  $items = array(
    'node__episode' => array(
      'template' => 'node--episode',
      'variables' => array('node' => (object) array())
    )
  );
  return $items;
}

function podcast_preprocess_node(&$vars) {
  $vars['theme_hook_suggestions'][] = 'node__episode';
  if ($vars['type'] == 'episode') {
    $node = $vars['node'];
    $file = file_load($node->field_episode_audio['und'][0]['fid']);
    $vars['episode_audiofile'] = $file;
    $vars['episode_playtime'] = _podcast_get_playtime($node);
    $new_title = t('Episode @episodenumber: @title', array(
      '@episodenumber' => $node->field__episode__number['und'][0]['value'],
      '@title' => $node->title
    ));
    $vars['title'] = $new_title;
    $vars['chapters'] = _podcast_render_chapters($node);
    _podcast_add_assets();
  }
}

function podcast_preprocess_page(&$vars) {
  if ((array_key_exists('node', $vars)) && ($vars['node']->type == 'episode')) {
    $node = $vars['node'];
    $new_title = t('Episode @episodenumber: @title', array(
      '@episodenumber' => $node->field__episode__number['und'][0]['value'],
      '@title' => $node->title
    ));
    $vars['title'] = $new_title;
    $vars['chapters'] = _podcast_render_chapters($node);
    _podcast_add_assets();
  }
}

function _podcast_add_assets() {
  drupal_add_js(drupal_get_path('module', 'podcast') . '/podlove-web-player/podlove-web-player/libs/html5shiv.js');
  drupal_add_js(drupal_get_path('module', 'podcast') . '/podlove-web-player/podlove-web-player/libs/mediaelement/build/mediaelement-and-player.min.js');
  drupal_add_js(drupal_get_path('module', 'podcast') . '/podlove-web-player/podlove-web-player/podlove-web-player.js');
  drupal_add_css(drupal_get_path('module', 'podcast') . '/podlove-web-player/podlove-web-player/libs/mediaelement/build/mediaelementplayer.min.css');
  drupal_add_css(drupal_get_path('module', 'podcast') . '/podlove-web-player/podlove-web-player/libs/pwpfont/css/fontello.css');
  drupal_add_css(drupal_get_path('module', 'podcast') . '/podlove-web-player/podlove-web-player/podlove-web-player.css');
}

function _podcast_get_playtime($node) {
  require_once('getid3/getid3.php');
  $getID3 = new getID3;
  $file = file_load($node->field_episode_audio['und'][0]['fid']);
  $fileinfo = $getID3->analyze(drupal_realpath($file->uri));
  return $fileinfo['playtime_string'];
}

/**
 * Convert number of seconds into hours, minutes and seconds
 * and return an array containing those values
 *
 * @param integer $seconds Number of seconds to parse
 * @return array
 */
function _podcast_secondsToTime($seconds) {
  // extract hours
  $hours = floor($seconds / (60 * 60));

  // extract minutes
  $divisor_for_minutes = $seconds % (60 * 60);
  $minutes = floor($divisor_for_minutes / 60);

  // extract the remaining seconds
  $divisor_for_seconds = $divisor_for_minutes % 60;
  $seconds = ceil($divisor_for_seconds);

  // return the final array
  $obj = array(
    "h" => (int) $hours,
    "m" => (int) $minutes,
    "s" => (int) $seconds,
  );
  return $obj;
}

function _podcast_render_chapters($node) {
  $chapters = array();
  if (count($node->field__episode__chapters) > 0) {
    foreach($node->field__episode__chapters['und'] as $field_chapter) {
      $chapter = node_load($field_chapter['target_id']);
      $duration = _podcast_secondsToTime($chapter->field__chapter__time['und'][0]['value']);
      $chapters[] = array(
        'title' => $chapter->title,
        'duration' => sprintf('%d:%d:%d.000',$duration['h'],$duration['m'],$duration['s']),
      );
    }
  }
  return $chapters;
}